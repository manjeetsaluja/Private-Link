AWSTemplateFormatVersion: 2010-09-09
Description: 

    This template deploys a VPC, with public and 2 private subnets spread across three Availability Zones. It deploys an Internet Gateway, with a default 
   route on the public subnets. It deploys a  NAT Gateway , and default route  in the private subnets. It deploys EC2 Instance, RDS Aurora Instance and  Elastic Search

Parameters:
    
    VpcId:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: vpc-040c71f76cc86a0de
    PvtLinkSubnet1:
        Type: String
        Default: subnet-0c0494d57af5ff17e
    PvtLinkSubnet2:
        Type: String
        Default: subnet-01b5574d84b442b52
    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
        Type: AWS::EC2::KeyPair::KeyName
        ConstraintDescription: Must be an EC2 Key
        Default: MKkey-NVirginia
    SSHLocation:
        Description: "The IP address range that can be used to SSH to the EC2 instances"
        Type: String
        Default: 0.0.0.0/0
        
    InstanceType:
        Description: Ec2 Instance Type
        Type: String
        Default: t2.micro
    ImageId:
        Description: Linux AMI
        Type: String
        Default: "ami-06eecef118bbf9259"
    
    Ec2RootVolumeSize:
        Description: Ec2 root volume size
        Type: String
        Default: "50"
    EBSEnabled:
        Description: 'Attach EBS'
        Type: String
        Default: true
    EBSVolumeSize:
        Description: 'EBS Volume size'
        Type: Number
        Default: 50
   
Resources:

    LBSecurityGroup:    
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: "LB-Security-Group"
            GroupDescription: "Security group for Loadbalancer"
            VpcId: !Ref VpcId
            Tags:
                - Key: Name
                  Value: PvtLink-LB-SG
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  CidrIp: '0.0.0.0/0'
                - IpProtocol: tcp
                  FromPort: '443'
                  ToPort: '443'
                  CidrIp: '0.0.0.0/0'
            
    EC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "Ec2 Security group"
            GroupName: "EC2-SG"
            VpcId: !Ref VpcId
            Tags:
                - Key: Name
                  Value: PvtLink-EC2-SG
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  SourceSecurityGroupId: !Ref LBSecurityGroup
                - IpProtocol: tcp
                  FromPort: '22'
                  ToPort: '22'
                  CidrIp: !Ref SSHLocation
                - IpProtocol: tcp
                  FromPort: '443'
                  ToPort: '443'
                  SourceSecurityGroupId: !Ref LBSecurityGroup
    
    EC2:
        Type: AWS::EC2::Instance
        Properties:
            InstanceType: !Ref InstanceType
            SecurityGroupIds: 
               - "Fn::GetAtt": ["EC2SecurityGroup", "GroupId"]
            KeyName: !Ref KeyName
            SubnetId: !Ref PvtLinkSubnet1 
            ImageId: !Ref ImageId
            Tags:
                - Key: Name
                  Value: myEC2
            BlockDeviceMappings:
                - DeviceName: "/dev/sda1"
                  Ebs:
                    DeleteOnTermination: true
                    VolumeSize: !Ref Ec2RootVolumeSize
                    VolumeType: gp2
                  
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Type: network
            Name: PvtLinkNLB
            Scheme: internal
            Subnets: 
             - !Ref PvtLinkSubnet1
             - !Ref PvtLinkSubnet2
            # Instances: 
            #   - !Ref EC2
    DummyTargetgroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Port: 443
            Protocol: TCP
            VpcId: !Ref VpcId
    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties: 
            LoadBalancerArn: !Ref LoadBalancer
            Port: 443
            Protocol: TCP
            DefaultActions:
                - TargetGroupArn: !Ref DummyTargetgroup
                  Type: forward
    
    EndpointService:
        Type: AWS::EC2::VPCEndpointService
        Properties: 
            AcceptanceRequired: yes
            NetworkLoadBalancerArns: 
                - !Ref LoadBalancer
        DependsOn: LoadBalancer        
    



           
            



